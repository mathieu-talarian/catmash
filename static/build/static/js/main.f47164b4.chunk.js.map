{"version":3,"sources":["api.js","components/forms/CatsForm.js","components/pages/CountPage.js","components/pages/HomePage.js","components/pages/ResultPage.js","components/pages/ErrorPage.js","components/navigation/MyHeader.js","components/navigation/MyFooter.js","App.js","serviceWorker.js","index.js"],"names":["url","api","get","axios","concat","then","res","data","install","post","getAllOrdered","cats","getCount","CatsForm","_ref","submit","loading","_useState","useState","_useState2","Object","slicedToArray","disabled","updateDisabled","_useState3","_useState4","checked","updateChecked","cat1","cat2","handleChange","_","_ref2","value","useEffect","columnStyle","span","align","react_default","a","createElement","es_form","className","onSubmit","id","voted","row","col","Item","type","name","onChange","e","target","htmlFor","src","image","alt","es_button","htmlType","CountPage","count","updateCount","total","catch","HomePage","updateLoading","updateCats","onInitialRender","ID","toast","error","lib","spin","tip","forms_CatsForm","err","pages_CountPage","columns","title","key","dataIndex","render","text","avatar","shape","size","ResultPage","table","rowKey","record","dataSource","ErrorPage","Redirect","to","Header","menu","theme","mode","defaultSelectedKeys","style","lineHeight","Link","Footer","Layout","Content","App","location","layout","App_Header","MyHeader","onClick","Switch","Route","path","exact","component","App_Footer","MyFooter","Boolean","window","hostname","match","ReactDOM","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f47164b4.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst url = \"api/v1\";\n\nexport default {\n  cats: {\n    get: () => axios.get(`${url}/cats`).then(res => res.data),\n    install: () => axios.post(`${url}/cats/install`),\n    getAllOrdered: () =>\n      axios.get(`${url}/cats/all/ordered`).then(res => res.data.cats)\n  },\n  vote: {\n    post: data => axios.post(`${url}/vote`, data)\n  },\n  count: {\n    getCount: () => axios.get(`${url}/count`).then(res => res.data)\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, Button, Row, Col } from \"antd\";\n\nconst CatsForm = ({ submit, loading, cats }) => {\n  const [disabled, updateDisabled] = useState(true);\n  const [checked, updateChecked] = useState();\n  const { cat1, cat2 } = cats;\n\n  const onSubmit = () => {\n    submit({\n      cat1: { id: cat1.id, voted: checked === \"1\" },\n      cat2: { id: cat2.id, voted: checked === \"2\" }\n    });\n  };\n\n  const handleChange = (_, { value }) => {\n    updateChecked(value);\n  };\n\n  useEffect(\n    () => (checked ? updateDisabled(false) : updateDisabled(true)),\n    checked\n  );\n\n  const columnStyle = {\n    span: 12,\n    align: \"center\"\n  };\n\n  return (\n    <Form loading={loading} className=\"hiddenRadio\" onSubmit={onSubmit}>\n      <Row>\n        <Col {...columnStyle}>\n          <Form.Item>\n            <input\n              id=\"cat1\"\n              type=\"radio\"\n              name=\"radioGroup\"\n              value=\"1\"\n              className=\"input-hidden\"\n              checked={checked === \"1\"}\n              onChange={e => handleChange(e, e.target)}\n            />\n            <label htmlFor=\"cat1\">\n              <img src={cat1.image} alt=\"cat1\" />\n            </label>\n          </Form.Item>\n        </Col>\n        <Col {...columnStyle}>\n          <Form.Item>\n            <input\n              id=\"cat2\"\n              type=\"radio\"\n              name=\"radioGroup\"\n              value=\"2\"\n              className=\"input-hidden\"\n              checked={checked === \"2\"}\n              onChange={e => handleChange(e, e.target)}\n            />\n            <label htmlFor=\"cat2\">\n              <img src={cat2.image} alt=\"cat2\" />\n            </label>\n          </Form.Item>\n        </Col>\n      </Row>\n      <Button type=\"primary\" htmlType=\"submit\" disabled={disabled}>\n        Soumettre le choix\n      </Button>\n    </Form>\n  );\n};\n\nCatsForm.propTypes = {\n  submit: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  cats: PropTypes.shape({\n    cat1: PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      image: PropTypes.string.isRequired\n    }),\n    cat2: PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      image: PropTypes.string.isRequired\n    })\n  }).isRequired\n};\n\nexport default CatsForm;\n","import React, { useState, useEffect } from \"react\";\nimport api from \"../../api\";\n\nconst CountPage = () => {\n  const [count, updateCount] = useState(0);\n\n  const onInitialRender = () => {\n    api.count\n      .getCount()\n      .then(res => updateCount(res.total))\n      .catch();\n  };\n\n  useEffect(onInitialRender, []);\n  return <div>Nombre de votes : {count}</div>;\n};\n\nexport default CountPage;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Spin } from \"antd\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport api from \"../../api\";\nimport CatsForm from \"../forms/CatsForm\";\nimport CountPage from \"./CountPage\";\n\nconst HomePage = () => {\n  const [loading, updateLoading] = useState(true);\n  const [cats, updateCats] = useState({\n    cat1: {\n      id: 0,\n      image: \"\"\n    },\n    cat2: {\n      id: 0,\n      image: \"\"\n    }\n  });\n\n  const onInitialRender = () => {\n    updateLoading(true);\n    api.cats\n      .get()\n      .then(res => {\n        updateCats({\n          cat1: {\n            id: res.cat1.ID,\n            image: res.cat1.image\n          },\n          cat2: {\n            id: res.cat2.ID,\n            image: res.cat2.image\n          }\n        });\n        updateLoading(false);\n      })\n      .catch(() => toast.error(\"un probléme est survenu avec le serveur\"));\n  };\n\n  const submit = res => {\n    updateLoading(true);\n    api.vote\n      .post(res)\n      .then(() => onInitialRender())\n      .catch(err => toast.error(err));\n  };\n\n  useEffect(onInitialRender, []);\n\n  return (\n    <div>\n      <ToastContainer />\n      HomePage\n      {loading ? (\n        <Spin tip=\"Chargement...\" />\n      ) : (\n        <CatsForm submit={submit} loading={loading} cats={cats} />\n      )}\n      <CountPage />\n    </div>\n  );\n};\n\nHomePage.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired\n  }).isRequired\n};\n\nexport default HomePage;\n","import React, { useState, useEffect } from \"react\";\nimport { Table, Avatar } from \"antd\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport api from \"../../api\";\n\n/*\n interface cats = {\n  image \n  rating \n  nombre de votes\n}\n*/\n\nconst columns = [\n  {\n    title: \"Image\",\n    key: \"image\",\n    dataIndex: \"image\",\n    render: text => {\n      return <Avatar shape=\"square\" size={64} src={text} />;\n    },\n    align: \"center\"\n  },\n  {\n    title: \"Nombre de votes\",\n    dataIndex: \"votes\",\n    key: \"votes\"\n  },\n  {\n    title: \"Rating\",\n    dataIndex: \"rating\",\n    key: \"rating\"\n  }\n];\n\nconst ResultPage = () => {\n  const [cats, updateCats] = useState([]);\n  const [loading, updateLoading] = useState(false);\n\n  const onInitialRender = () => {\n    updateLoading(true);\n    api.cats\n      .getAllOrdered()\n      .then(res => {\n        updateLoading(false);\n        updateCats(res);\n      })\n      .catch(() => toast.error(\"un probleme est survenu avec le serveur\"));\n  };\n\n  useEffect(onInitialRender, []);\n\n  return (\n    <div>\n      <ToastContainer />\n      ResultPage\n      <Table\n        rowKey={record => record.ID}\n        key={record => record.ID}\n        loading={loading}\n        dataSource={cats}\n        columns={columns}\n      />\n    </div>\n  );\n};\n\nexport default ResultPage;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nexport default () => <Redirect to=\"/\" />;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = (/* { location } */) => (\n  <Menu\n    theme=\"dark\"\n    mode=\"horizontal\"\n    defaultSelectedKeys={[\"2\"]}\n    style={{ lineHeight: \"64px\" }}\n  >\n    <Menu.Item key=\"1\">\n      <Link to=\"/\">Vote</Link>\n    </Menu.Item>\n    <Menu.Item key=\"2\">\n      <Link to=\"/results\">Resultats</Link>\n    </Menu.Item>\n  </Menu>\n);\n\nHeader.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired\n  }).isRequired\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => <div>Footer</div>;\n\nexport default Footer;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Button, Layout } from \"antd\";\nimport HomePage from \"./components/pages/HomePage\";\nimport ResultPage from \"./components/pages/ResultPage\";\nimport ErrorPage from \"./components/pages/ErrorPage\";\n\nimport MyHeader from \"./components/navigation/MyHeader\";\nimport MyFooter from \"./components/navigation/MyFooter\";\n\nimport api from \"./api\";\n\nconst { Header, Content, Footer } = Layout;\n\nconst App = ({ location }) => (\n  <Layout>\n    <Header>\n      <MyHeader location={location} />\n    </Header>\n    <Button onClick={() => api.cats.install()}>Cats</Button>\n    <Content>\n      <Switch>\n        <Route location={location} path=\"/\" exact component={HomePage} />\n        <Route\n          location={location}\n          path=\"/results\"\n          exact\n          component={ResultPage}\n        />\n        <Route path=\"*\" component={ErrorPage} />\n      </Switch>\n    </Content>\n    <Footer>\n      <MyFooter />\n    </Footer>\n  </Layout>\n);\n\nApp.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired\n  }).isRequired\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport \"antd/dist/antd.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./index.sass\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route component={App} />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}