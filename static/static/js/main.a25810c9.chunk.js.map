{"version":3,"sources":["api.js","components/forms/CatsForm.js","components/pages/CountPage.js","components/pages/HomePage.js","components/pages/ResultPage.js","components/pages/ErrorPage.js","components/navigation/MyHeader.js","components/navigation/MyFooter.js","App.js","serviceWorker.js","index.js"],"names":["url","api","get","axios","concat","then","res","data","install","post","getAllOrdered","cats","getCount","CatsForm","_ref","submit","loading","_useState","useState","_useState2","Object","slicedToArray","disabled","updateDisabled","_useState3","_useState4","checked","updateChecked","cat1","cat2","handleChange","_","_ref2","value","useEffect","columnStyle","span","align","react_default","a","createElement","es_form","toString","className","onSubmit","id","voted","row","col","Item","type","name","onChange","e","target","htmlFor","src","image","alt","es_button","block","size","htmlType","CountPage","newCount","count","updateCount","onInitialRender","total","catch","HomePage","updateLoading","_useState5","_useState6","vote","updateVote","_useState7","_useState8","updateCats","ID","toast","error","layout","Content","lib","skeleton","active","spin","tip","forms_CatsForm","success","err","ghost","onClick","setTimeout","pages_CountPage","columns","title","key","dataIndex","render","text","avatar","shape","ResultPage","table","rowKey","record","dataSource","ErrorPage","Redirect","to","Header","location","menu","theme","mode","style","lineHeight","defaultSelectedKeys","pathname","Link","Footer","Layout","App","App_Header","MyHeader","Switch","Route","path","exact","component","App_Footer","MyFooter","Boolean","window","hostname","match","ReactDOM","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a25810c9.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst url = \"api/v1\";\n\nexport default {\n  cats: {\n    get: () => axios.get(`${url}/cats`).then(res => res.data),\n    install: () => axios.post(`${url}/cats/install`),\n    getAllOrdered: () =>\n      axios.get(`${url}/cats/all/ordered`).then(res => res.data.cats)\n  },\n  vote: {\n    post: data => axios.post(`${url}/vote`, data)\n  },\n  count: {\n    getCount: () => axios.get(`${url}/count`).then(res => res.data)\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, Button, Row, Col } from \"antd\";\n\nconst CatsForm = ({ submit, loading, cats }) => {\n  const [disabled, updateDisabled] = useState(true);\n  const [checked, updateChecked] = useState();\n  const { cat1, cat2 } = cats;\n\n  const onSubmit = () => {\n    submit({\n      cat1: { id: cat1.id, voted: checked === \"1\" },\n      cat2: { id: cat2.id, voted: checked === \"2\" }\n    });\n  };\n\n  const handleChange = (_, { value }) => {\n    updateChecked(value);\n  };\n\n  useEffect(\n    () => (checked ? updateDisabled(false) : updateDisabled(true)),\n    checked\n  );\n\n  const columnStyle = {\n    span: 12,\n    align: \"center\"\n  };\n\n  return (\n    <Form\n      loading={loading.toString()}\n      className=\"hiddenRadio\"\n      onSubmit={onSubmit}\n    >\n      <Row>\n        <Col {...columnStyle}>\n          <Form.Item>\n            <input\n              id=\"cat1\"\n              type=\"radio\"\n              name=\"radioGroup\"\n              value=\"1\"\n              className=\"input-hidden\"\n              checked={checked === \"1\"}\n              onChange={e => handleChange(e, e.target)}\n            />\n            <label htmlFor=\"cat1\">\n              <img\n                src={cat1.image}\n                alt=\"cat1\"\n                className={checked !== \"1\" && \"unchecked\"}\n              />\n            </label>\n          </Form.Item>\n        </Col>\n        <Col {...columnStyle}>\n          <Form.Item>\n            <input\n              id=\"cat2\"\n              type=\"radio\"\n              name=\"radioGroup\"\n              value=\"2\"\n              className=\"input-hidden\"\n              checked={checked === \"2\"}\n              onChange={e => handleChange(e, e.target)}\n            />\n            <label htmlFor=\"cat2\">\n              <img\n                src={cat2.image}\n                alt=\"cat2\"\n                className={checked !== \"2\" && \"unchecked\"}\n              />\n            </label>\n          </Form.Item>\n        </Col>\n      </Row>\n      <div className=\"submitButton\">\n        <Button\n          block\n          size=\"large\"\n          type=\"primary\"\n          htmlType=\"submit\"\n          disabled={disabled}\n          loading={loading}\n        >\n          Soumettre votre choix\n        </Button>\n      </div>\n    </Form>\n  );\n};\n\nCatsForm.propTypes = {\n  submit: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  cats: PropTypes.shape({\n    cat1: PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      image: PropTypes.string.isRequired\n    }),\n    cat2: PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      image: PropTypes.string.isRequired\n    })\n  }).isRequired\n};\n\nexport default CatsForm;\n","import React, { useState, useEffect } from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport api from \"../../api\";\n\nconst CountPage = ({ newCount }) => {\n  const [count, updateCount] = useState(0);\n\n  const onInitialRender = () => {\n    api.count\n      .getCount()\n      .then(res => updateCount(res.total))\n      .catch();\n  };\n\n  useEffect(onInitialRender, []);\n  useEffect(onInitialRender, [newCount]);\n  return (\n    <div className=\"counter\">\n      {count} {count === 1 && count === 0 ? \"vote\" : \"votes\"}\n    </div>\n  );\n};\n\nCountPage.propTypes = {\n  newCount: PropTypes.number.isRequired\n};\n\nexport default CountPage;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Layout, Spin, Skeleton, Row, Col } from \"antd\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport api from \"../../api\";\nimport CatsForm from \"../forms/CatsForm\";\nimport CountPage from \"./CountPage\";\n\nconst HomePage = () => {\n  const [loading, updateLoading] = useState(true);\n  const [disabled, updateDisabled] = useState(false);\n  const [vote, updateVote] = useState(0);\n  const [cats, updateCats] = useState({\n    cat1: {\n      id: 0,\n      image: \"\"\n    },\n    cat2: {\n      id: 0,\n      image: \"\"\n    }\n  });\n\n  const onInitialRender = () => {\n    updateLoading(true);\n    api.cats\n      .get()\n      .then(res => {\n        updateCats({\n          cat1: {\n            id: res.cat1.ID,\n            image: res.cat1.image\n          },\n          cat2: {\n            id: res.cat2.ID,\n            image: res.cat2.image\n          }\n        });\n        updateLoading(false);\n      })\n      .catch(() => toast.error(\"un probléme est survenu avec le serveur\"));\n  };\n\n  const submit = res => {\n    updateLoading(true);\n    api.vote\n      .post(res)\n      .then(() => {\n        toast.success(\"Votre vote a été pris en compte\");\n        updateVote(vote + 1);\n        onInitialRender();\n      })\n      .catch(err => toast.error(err));\n  };\n\n  const changeImages = () => {\n    updateDisabled(true);\n    onInitialRender();\n    setTimeout(() => {\n      updateDisabled(false);\n    }, 20000);\n  };\n\n  useEffect(onInitialRender, []);\n\n  return (\n    <Layout>\n      <Layout.Content>\n        <ToastContainer />\n        <div className=\"homeTitle\">\n          <h1>Votez pour votre chat préféré!</h1>\n        </div>\n        {loading ? (\n          <Skeleton active>\n            <Spin tip=\"Chargement...\" />\n            <Row>\n              <Col />\n              <Col />\n            </Row>\n          </Skeleton>\n        ) : (\n          <CatsForm submit={submit} loading={loading} cats={cats} />\n        )}\n        <div className=\"changeButton\">\n        <Button\n          block\n          size=\"large\"\n          disabled={disabled}\n          ghost\n          onClick={changeImages}\n        >\n          Changer les images\n        </Button>\n        </div>\n        <CountPage newCount={vote} />\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nHomePage.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired\n  }).isRequired\n};\n\nexport default HomePage;\n","import React, { useState, useEffect } from \"react\";\nimport { Table, Avatar } from \"antd\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport api from \"../../api\";\n\n/*\n interface cats = {\n  image \n  rating \n  nombre de votes\n}\n*/\n\nconst columns = [\n  {\n    title: \"Image\",\n    key: \"image\",\n    dataIndex: \"image\",\n    render: text => {\n      return <Avatar shape=\"square\" size={64} src={text} />;\n    },\n    align: \"center\"\n  },\n  {\n    title: \"Nombre de votes\",\n    dataIndex: \"votes\",\n    key: \"votes\"\n  },\n  {\n    title: \"Rating\",\n    dataIndex: \"rating\",\n    key: \"rating\"\n  }\n];\n\nconst ResultPage = () => {\n  const [cats, updateCats] = useState([]);\n  const [loading, updateLoading] = useState(false);\n\n  const onInitialRender = () => {\n    updateLoading(true);\n    api.cats\n      .getAllOrdered()\n      .then(res => {\n        updateLoading(false);\n        updateCats(res);\n      })\n      .catch(() => toast.error(\"un probleme est survenu avec le serveur\"));\n  };\n\n  useEffect(onInitialRender, []);\n\n  return (\n    <div>\n      <ToastContainer />\n      <Table\n        rowKey={record => record.ID}\n        key={record => record.ID}\n        loading={loading}\n        dataSource={cats}\n        columns={columns}\n      />\n    </div>\n  );\n};\n\nexport default ResultPage;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nexport default () => <Redirect to=\"/\" />;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = ({ location }) => (\n  <Menu\n    theme=\"dark\"\n    mode=\"horizontal\"\n    style={{ lineHeight: \"64px\" }}\n    defaultSelectedKeys={location.pathname === \"/\" ? [\"1\"] : [\"2\"]}\n  >\n    <Menu.Item key=\"1\">\n      <Link to=\"/\">Vote</Link>\n    </Menu.Item>\n    <Menu.Item key=\"2\">\n      <Link to=\"/results\">Resultats</Link>\n    </Menu.Item>\n  </Menu>\n);\n\nHeader.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired\n  }).isRequired\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => <div className=\"myfooter\">© Mathieu Moullec 2019</div>;\n\nexport default Footer;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Layout } from \"antd\";\nimport HomePage from \"./components/pages/HomePage\";\nimport ResultPage from \"./components/pages/ResultPage\";\nimport ErrorPage from \"./components/pages/ErrorPage\";\n\nimport MyHeader from \"./components/navigation/MyHeader\";\nimport MyFooter from \"./components/navigation/MyFooter\";\n\nconst { Header, Content, Footer } = Layout;\n\nconst App = ({ location }) => (\n  <Layout>\n    <Header>\n      <MyHeader location={location} />\n    </Header>\n    <Content>\n      <Switch>\n        <Route location={location} path=\"/\" exact component={HomePage} />\n        <Route\n          location={location}\n          path=\"/results\"\n          exact\n          component={ResultPage}\n        />\n        <Route path=\"*\" component={ErrorPage} />\n      </Switch>\n    </Content>\n    <Footer className=\"footer\">\n      <MyFooter />\n    </Footer>\n  </Layout>\n);\n\nApp.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired\n  }).isRequired\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport \"antd/dist/antd.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./index.sass\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route component={App} />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}