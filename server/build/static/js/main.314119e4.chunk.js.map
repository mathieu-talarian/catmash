{"version":3,"sources":["api.js","pages/HomePage.js","pages/ResultPage.js","App.js","serviceWorker.js","index.js"],"names":["url","api","get","axios","concat","then","res","data","install","post","getAllOrdered","cats","HomePage","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","updateLoading","_useState5","cat1","id","image","cat2","_useState6","updateCats","onSubmit","e","preventDefault","voted","catch","err","console","log","useEffect","ID","react_default","a","createElement","es_form","es_radio","Group","span","Button","value","onClick","alt","src","es_button","Link","to","ResultPage","loading","map","cat","rating","App","_ref","location","layout","Switch","Route","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.314119e4.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst url = 'api/v1'\n\nexport default {\n  cats: {\n    get: () => axios.get(`${url}/cats`).then(res => res.data),\n    install: () => axios.post(`${url}/cats/install`),\n    getAllOrdered: () => axios.get(`${url}/cats/all/ordered`).then(res => res.data.cats)\n  },\n  vote: {\n    post: (data) => axios.post(`${url}/vote`, data)\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport api from '../api'\nimport { Link } from 'react-router-dom'\nimport { Form, Radio, Button } from 'antd'\n\nconst HomePage = () => {\n  const [disabled, updateDisabled] = useState(true)\n  const [loading, updateLoading] = useState(false)\n  const [cats, updateCats] = useState({\n    cat1: {\n      id: 0,\n      image: 0\n    },\n    cat2: {\n      id: 0,\n      image: 0\n    }\n  })\n\n  const onInitialRender = () => {\n    updateLoading(true)\n    api.cats.get()\n      .then(res => {\n        updateCats({\n          cat1: {\n            id: res.cat1.ID,\n            image: res.cat1.image\n          },\n          cat2: {\n            id: res.cat2.ID,\n            image: res.cat2.image\n          }\n        })\n        updateLoading(false)\n      })\n      .catch(err => console.log(err))\n  }\n\n  const onSubmit = (e, res) => {\n    const { cat1, cat2 } = cats\n    e.preventDefault()\n    updateLoading(true)\n    api.vote.post({\n      cat1: { id: cat1.id, voted: res === 1 },\n      cat2: { id: cat2.id, voted: res === 2 }\n    })\n      .then(\n        () => updateLoading(false)\n      )\n      .catch(err => console.log(err))\n  }\n\n  useEffect(onInitialRender, [])\n\n  return (\n    <div>\n      HomePage\n      <Form>\n        <Radio.Group span={12}>\n          <Radio.Button value='1'><img onClick={(e) => onSubmit(e, 1)} alt='cat1' src={cats.cat1.image} /></Radio.Button>\n          <Radio.Button value='2'><img onClick={(e) => onSubmit(e, 2)} alt='cat2' src={cats.cat2.image} /></Radio.Button>\n        </Radio.Group>\n        <Button>Soumettre</Button>\n      </Form>\n      <Link to='/results'>Resultats</Link>\n    </div>)\n}\n\nHomePage.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired\n  }).isRequired\n}\n\nexport default HomePage\n","import React, { useState, useEffect } from 'react'\nimport api from '../api'\n\nconst ResultPage = () => {\n  const [cats, updateCats] = useState([])\n  const [loading, updateLoading] = useState(false)\n\n  const onInitialRender = () => {\n    updateLoading(true)\n    api.cats.getAllOrdered()\n      .then((res) => {\n        updateLoading(false)\n        updateCats(res)\n      })\n      .catch(err => console.log(err))\n  }\n\n  useEffect(onInitialRender, [])\n\n  const displayCats = () => (\n    <tr>\n      {cats.map(cat =>\n        <ul>{cat.ID}<br />{cat.rating}</ul>\n      )}\n    </tr>\n  )\n\n  return <div loading={loading}>ResultPage\n    {displayCats()}\n  </div>\n}\n\nexport default ResultPage\n","import React from 'react'\nimport { Route, Switch, Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport './App.css'\n\nimport { Layout, Button } from 'antd'\n\nimport HomePage from './pages/HomePage'\nimport ResultPage from './pages/ResultPage'\nimport api from './api'\n\nconst App = ({ location }) => <Layout>\n  <Button onClick={(e) => api.cats.install()}>Cats</Button>\n  <Link to='/'>To home</Link>\n  <Link to='/result'>To result</Link>\n  <Switch>\n\n    <Route\n      location={location}\n      path='/'\n      exact\n      component={HomePage}\n    />\n    <Route\n      location={location}\n      path='/result'\n      exact\n      component={ResultPage}\n    />\n  </Switch>\n</Layout>\n\nApp.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired\n  }).isRequired\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<BrowserRouter><Route component={App} /></BrowserRouter>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}